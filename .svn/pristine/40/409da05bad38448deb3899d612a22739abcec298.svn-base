/**
 * Copyright &copy; 2014-2016 <a href="https://pactera.com">Pactera-JeeSite</a> All rights reserved.
 */
package com.pactera.jeesite.modules.qar.web;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.pactera.jeesite.modules.qar.entity.QarEvent;
import com.pactera.jeesite.modules.qar.service.QarEventService;

import javax.validation.ConstraintViolationException;
import org.springframework.web.multipart.MultipartFile;
import com.orangesignal.csv.CsvConfig;
import com.orangesignal.csv.manager.CsvEntityManager;
import com.orangesignal.csv.manager.CsvSaver;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.Encodes;
	
/**
 * QAR超限事件Controller
 * @author Jeffen@pactera
 * @version 2015-06-20
 */
@Controller
@RequestMapping(value = "${adminPath}/qar/qarEvent")
public class QarEventController extends BaseController {

	@Autowired
	private QarEventService qarEventService;
	
	@ModelAttribute
	public QarEvent get(@RequestParam(required=false) String id) {
		QarEvent entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = qarEventService.get(id);
		}
		if (entity == null){
			entity = new QarEvent();
		}
		return entity;
	}
	
	@RequiresPermissions("qar:qarEvent:view")
	@RequestMapping(value = {"list", ""})
	public String list(QarEvent qarEvent, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<QarEvent> page = qarEventService.findPage(new Page<QarEvent>(request, response), qarEvent); 
		model.addAttribute("page", page);
		return "modules/qar/qarEventList";
	}

	@RequiresPermissions("qar:qarEvent:view")
	@RequestMapping(value = "form")
	public String form(QarEvent qarEvent, Model model) {
		model.addAttribute("qarEvent", qarEvent);
		return "modules/qar/qarEventForm";
	}

	@RequiresPermissions("qar:qarEvent:edit")
	@RequestMapping(value = "save")
	public String save(QarEvent qarEvent, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, qarEvent)){
			return form(qarEvent, model);
		}
		qarEventService.save(qarEvent);
		addMessage(redirectAttributes, "保存QAR超限事件成功");
		return "redirect:"+Global.getAdminPath()+"/qar/qarEvent/?repage";
	}
	
	@RequiresPermissions("qar:qarEvent:edit")
	@RequestMapping(value = "delete")
	public String delete(QarEvent qarEvent, RedirectAttributes redirectAttributes) {
		qarEventService.delete(qarEvent);
		addMessage(redirectAttributes, "删除QAR超限事件成功");
		return "redirect:"+Global.getAdminPath()+"/qar/qarEvent/?repage";
	}
	/**
	 * 导出CSV数据
	 * @param qarEvent
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("qar:qarEvent:io")
	@RequestMapping(value = "export/csv", method = RequestMethod.POST)
	public String exportCsvFile(QarEvent qarEvent, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【QAR超限事件】" + DateUtils.getDateTimeTight() + ".csv";
			List<QarEvent> lst = qarEventService.findList(qarEvent);
			CsvEntityManager cet = new CsvEntityManager(new CsvConfig(
					CsvConfig.DEFAULT_SEPARATOR));
			CsvSaver csvSaver = null;
			response.reset();
			response.setContentType("application/octet-stream; charset=utf-8");
			response.setHeader("Content-Disposition", "attachment; filename="
					+ Encodes.urlEncode(fileName));
			csvSaver = cet.save(lst, QarEvent.class);
			csvSaver.to(response.getOutputStream());
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出QAR超限事件失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/qar/qarEvent/?repage";
	}

	/**
	 * 导入CSV数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("qar:qarEvent:io")
	@RequestMapping(value = "import/csv", method = RequestMethod.POST)
	public String importCsvFile(MultipartFile file,
			RedirectAttributes redirectAttributes) throws Exception {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + Global.getAdminPath()
					+ "/qar/qarEvent/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			if (StringUtils.isBlank(file.getOriginalFilename())) {
				throw new RuntimeException("导入文档为空!");
			} else if (!file.getOriginalFilename().toLowerCase()
					.endsWith("csv")) {
				throw new RuntimeException("文档格式不正确!");
			} else {
				List<QarEvent> list = new CsvEntityManager().load(
						QarEvent.class).from(file.getInputStream());
				long i = 0;
				for (QarEvent qarEvent : list) {

					try {
						BeanValidators.validateWithException(validator, qarEvent);
						qarEventService.save(qarEvent);
						successNum++;
						++i;
					} catch (ConstraintViolationException ex) {
						failureMsg.append("<br/>CSV数据第" + i + "行导入失败：");
						List<String> messageList = BeanValidators
								.extractPropertyAndMessageAsList(ex, ": ");
						for (String message : messageList) {
							failureMsg.append(message + "; ");
							failureNum++;
						}
					} catch (Exception ex) {
						failureMsg.append("<br/>导入CSV数据失败：" + ex.getMessage());
					}
				}
				if (failureNum > 0) {
					failureMsg.insert(0, "，失败 " + failureNum + " 条数据，导入信息如下：");
				}
				addMessage(redirectAttributes, "已成功导入 " + successNum
						+ " 条CSV数据" + failureMsg);
			}
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入CSV数据失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/qar/qarEvent/?repage";
	}

	/**
	 * 下载导入CSV数据的模板
	 * 
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("qar:qarEvent:io")
	@RequestMapping(value = "import/csv/template")
	public String importCsvFileTemplate(HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【QAR超限事件】数据导入模板.csv";

			List<QarEvent> list = new ArrayList();
			QarEvent qarEvent = new QarEvent();
			//qarEvent = qarEvent.getSinglePoJoByDefaultValue();
			list.add(qarEvent);

			CsvEntityManager cet = new CsvEntityManager();
			response.reset();
			response.setContentType("application/octet-stream; charset=utf-8");
			response.setHeader("Content-Disposition", "attachment; filename="
					+ Encodes.urlEncode(fileName));
			cet.save(list, QarEvent.class).to(response.getOutputStream());
			return null;

		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/qar/qarEvent/?repage";
	}
	
}